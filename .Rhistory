overall_8$names<-rownames(overall_8)
overall_8$performance<-overall_8 $rfperf_8.overall
overall_8 $rfperf_8.overall<-NULL
byClass_8<-data.frame(rfperf_8$byClass)
byClass_8$names<-rownames(byClass_8)
byClass_8$performance<-byClass_8$rfperf_8.byClass
byClass_8$rfperf_8.byClass<-NULL
aucci_8<-data.frame(rocrf_8$ci)
aucci_8$names<-c("aucciLower","auccimedian","aucciupper")
aucci_8$performance<-aucci_8$rocrf_8.ci
aucci_8$rocrf_8.ci<-NULL
auc_8<-data.frame(rocrf_8$auc)
auc_8$names<-c("auc")
auc_8$performance<-auc_8$rocrf_8.auc
auc_8$rocrf_8.auc<-NULL
perRF8<-rbind.data.frame(overall_8,byClass_8,auc_8,aucci_8)
perRF8$performance<-round(perRF8$performance,5)
fit_rf_cls9<-readRDS("acne_tuneRF.9.rds")
testpredprop9<-predict(fit_rf_cls9,newdata = acne_num_test,type = 'prob')
rfPred_9<-predict(fit_rf_cls9, acne_num_test,type="response")
rfperf_9<-confusionMatrix(acne_num_test$Acne,rfPred_9,positive='Yes', mode="everything")
rocrf_9<-roc(acne_num_test$Acne,testpredprop9[,2],aur=TRUE,ci=TRUE)
overall_9 <- data.frame(rfperf_9$overall)
overall_9$names<-rownames(overall_9)
overall_9$performance<-overall_9 $rfperf_9.overall
overall_9 $rfperf_9.overall<-NULL
byClass_9<-data.frame(rfperf_9$byClass)
byClass_9$names<-rownames(byClass_9)
byClass_9$performance<-byClass_9$rfperf_9.byClass
byClass_9$rfperf_9.byClass<-NULL
aucci_9<-data.frame(rocrf_9$ci)
aucci_9$names<-c("aucciLower","auccimedian","aucciupper")
aucci_9$performance<-aucci_9$rocrf_9.ci
aucci_9$rocrf_9.ci<-NULL
auc_9<-data.frame(rocrf_9$auc)
auc_9$names<-c("auc")
auc_9$performance<-auc_9$rocrf_9.auc
auc_9$rocrf_9.auc<-NULL
perRF9<-rbind.data.frame(overall_9,byClass_9,auc_9,aucci_9)
perRF9$performance<-round(perRF9$performance,5)
per_acne<-cbind.data.frame(perRF1,perRF2,perRF3,perRF4,perRF5,perRF6,perRF7,perRF8,perRF9)
View(per_acne)
per_acne<-per_acne[,c(1,2,4,6,8,10,12,14,16,18)]
View(per_acne)
per_acne<-data.frame(t(per_acne))
per_acne<-per_acne[2:10,]
per_acne$AUC<- per_acne$X1
per_acne$AUCLower<- per_acne$X11
per_acne$AUCUpper<- per_acne$X3
per_acne$X1<-NULL
per_acne$X11<-NULL
per_acne$X2<-NULL
per_acne$X3<-NULL
per_acne1<-as.data.frame(lapply(per_acne,as.numeric))
per_acne1$Model<-c("RF1","RF2","RF3","RF4","RF5","RF6","RF7","RF8","RF9")
View(per_acne1)
View(per_acne)
per_acne<-cbind.data.frame(perRF1,perRF2,perRF3,perRF4,perRF5,perRF6,perRF7,perRF8,perRF9)
per_acne<-per_acne[,c(1,2,4,6,8,10,12,14,16,18)]
per_acne<-data.frame(t(per_acne))
per_acne<-per_acne[2:10,]
View(per_acne)
View(per_acne)
per_acne<-cbind.data.frame(perRF1,perRF2,perRF3,perRF4,perRF5,perRF6,perRF7,perRF8,perRF9)
View(per_acne)
per_acne<-cbind.data.frame(perRF1,perRF2,perRF3,perRF4,perRF5,perRF6,perRF7,perRF8,perRF9)
per_acne<-per_acne[,c(1,2,4,6,8,10,12,14,16,18)]
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
perRF$performance<-round(perRF$performance,5)
perRF
perRFlist <- list()
for (i in c(1:9)) {
fit_rf_cls <- readRDS(paste("H:/acne_YHR/acne/Code/Rcodesubmit/RF_optimize/acne_tuneRF.",i,".rds",sep = ""))
testpredprop<-predict(fit_rf_cls,newdata = acne_num_test,type = 'prob')
rfPred<-predict(fit_rf_cls, acne_num_test,type="response")
rfperf<-confusionMatrix(acne_num_test$Acne,rfPred,positive='Yes', mode="everything")
rocrf<-roc(acne_num_test$Acne,testpredprop[,2],aur=TRUE,ci=TRUE)
overall <- data.frame(rfperf$overall)
overall$names<-rownames(overall)
overall$performance<-overall$rfperf.overall
overall$rfperf.overall<-NULL
byClass<-data.frame(rfperf$byClass)
byClass$names<-rownames(byClass)
byClass$performance<-byClass$rfperf.byClass
byClass$rfperf.byClass<-NULL
aucci<-data.frame(rocrf$ci)
aucci$names<-c("aucciLower","auccimedian","aucciupper")
aucci$performance<-aucci$rocrf.ci
aucci$rocrf.ci<-NULL
auc<-data.frame(rocrf$auc)
auc$names<-c("auc")
auc$performance<-auc$rocrf.auc
auc$rocrf.auc<-NULL
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
perRF$performance<-round(perRF$performance,5)
perRFlist[[i]] <- perRF
}
per_acne0 <- do.call(perRFlist,cbind)
per_acne0 <- do.call(cbind,perRFlist)
View(per_acne0)
per_acne<-cbind.data.frame(perRF1,perRF2,perRF3,perRF4,perRF5,perRF6,perRF7,perRF8,perRF9)
per_acne <- do.call(cbind,perRFlist)
per_acne<-per_acne[,c(1,2,4,6,8,10,12,14,16,18)]
per_acne <- do.call(cbind,perRFlist)
per_acne<-per_acne[,c(1,2,4,6,8,10,12,14,16,18)]
per_acne<-data.frame(t(per_acne))
per_acne<-per_acne[2:10,]
per_acne$AUC<- per_acne$X1
per_acne$AUCLower<- per_acne$X11
per_acne$AUCUpper<- per_acne$X3
per_acne$X1<-NULL
per_acne$X11<-NULL
per_acne$X2<-NULL
per_acne$X3<-NULL
per_acne1<-as.data.frame(lapply(per_acne,as.numeric))
per_acne1$Model<-c("RF1","RF2","RF3","RF4","RF5","RF6","RF7","RF8","RF9")
optimalRF<-per_acne1$Model[which(per_acne1$AUC==max(per_acne1$AUC))] # selecting the optimal RF using largest AUC
optimalRF
per_acne1
write.csv(per_acne1, 'RF_optimize/RFperformance_Acne.csv')
fit_rf_cls7
optimalRF
################################# feature importance  ##############################################
besti <- 7
################################# feature importance  ##############################################
optimalRF
besti <- 7
rfbest <- readRDS(paste("H:/acne_YHR/acne/Code/Rcodesubmit/RF_optimize/acne_tuneRF.",besti,".rds",sep = ""))
acnerf_importance_scale<-data.frame(importance(rfbest,scale = TRUE), check.names = FALSE)
acnerf_importance<-data.frame(importance(rfbest), check.names = FALSE)
acnerf_importance_sort<- data.frame(acnerf_importance[order(acnerf_importance$MeanDecreaseAccuracy,decreasing = TRUE),])
acnerf_importance_sort$features=rownames(acnerf_importance_sort)
acnerf_importance_sort$relativeinf<-sprintf("%0.2f", acnerf_importance_sort$MeanDecreaseAccuracy/sum(acnerf_importance_sort$MeanDecreaseAccuracy)*100)
acnerf_importance_sort$group<-ifelse(acnerf_importance_sort$features%in%c("Gender","Age","Ethnicity","Household_income","Grade"),"DSCs",
ifelse(acnerf_importance_sort$features%in%c("Skin_type","Sensitive_skin","Genetic","Menstrual_blood_volume",
"Menstrual_colic","Menstrual_cycle","","PHQ9","BMI"),"BMAs",
ifelse(acnerf_importance_sort$features%in%c("Den_barbecue_shop","Den_busstop","Den_cafeterias_shop","Den_fruit_shop",
"Den_hotpot_restaurant","Den_intersection","Den_KFC_McDold.s",
"Den_milktea_shop","Den_roadlength","Denpop","NDVI"),"BEs",
ifelse(acnerf_importance_sort$features%in%c("Daylight","Temperature","Relative_humidity",
"CO","NO2","O3","PM2.5","SO2"),"NEs","LFs"))))
optimalRF
besti <- 7
rfbest <- readRDS(paste("H:/acne_YHR/acne/Code/Rcodesubmit/RF_optimize/acne_tuneRF.",besti,".rds",sep = ""))
rfbest<-fit_rf_cls7
acnerf_importance_scale<-data.frame(importance(rfbest,scale = TRUE), check.names = FALSE)
acnerf_importance<-data.frame(importance(rfbest), check.names = FALSE)
acnerf_importance_sort<- data.frame(acnerf_importance[order(acnerf_importance$MeanDecreaseAccuracy,decreasing = TRUE),])
acnerf_importance_sort$features=rownames(acnerf_importance_sort)
acnerf_importance_sort$relativeinf<-sprintf("%0.2f", acnerf_importance_sort$MeanDecreaseAccuracy/sum(acnerf_importance_sort$MeanDecreaseAccuracy)*100)
acnerf_importance_sort$group<-ifelse(acnerf_importance_sort$features%in%c("Gender","Age","Ethnicity","Household_income","Grade"),"DSCs",
ifelse(acnerf_importance_sort$features%in%c("Skin_type","Sensitive_skin","Genetic","Menstrual_blood_volume",
"Menstrual_colic","Menstrual_cycle","","PHQ9","BMI"),"BMAs",
ifelse(acnerf_importance_sort$features%in%c("Den_barbecue_shop","Den_busstop","Den_cafeterias_shop","Den_fruit_shop",
"Den_hotpot_restaurant","Den_intersection","Den_KFC_McDold.s",
"Den_milktea_shop","Den_roadlength","Denpop","NDVI"),"BEs",
ifelse(acnerf_importance_sort$features%in%c("Daylight","Temperature","Relative_humidity",
"CO","NO2","O3","PM2.5","SO2"),"NEs","LFs"))))
palette <- c("#313695", "#D73027")
windowsFonts(TNM = windowsFont("Times New Roman"))
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
#stopCluster(cl)
library(openxlsx)
library(skimr)
library(DataExplorer)
library(caret)
library(randomForest)
library(pROC)
library(dplyr)
library(ROSE)
############################### function to change label to Y/N#####################################
change2Level <- function(y){y <- factor(y, levels=c(0, 1, "No", "Yes"))
y[y == '0'] <- 'No'
y[y == '1'] <- 'Yes'
y <- factor(y, levels=c("No", "Yes"))}
#########################read input data ###########################################
acnerank_num_train<-readRDS('data/acnerank_num_train.rds')
acnerank_num_test<-readRDS('data/acnerank_num_test.rds')
palette <- c("#313695", "#D73027")
windowsFonts(TNM = windowsFont("Times New Roman"))
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
#stopCluster(cl)
library(openxlsx)
library(skimr)
library(DataExplorer)
library(caret)
library(randomForest)
library(pROC)
library(dplyr)
library(ROSE)
############################### function to change label to Y/N#####################################
change2Level <- function(y){y <- factor(y, levels=c(0, 1, "No", "Yes"))
y[y == '0'] <- 'No'
y[y == '1'] <- 'Yes'
y <- factor(y, levels=c("No", "Yes"))}
#########################read input data ###########################################
acnerank_num_train<-readRDS('data/acnerank_num_train.rds')
getwd()
setwd(H:/acne_YHR/acne/Code/AcneMLCode)
palette <- c("#313695", "#D73027")
windowsFonts(TNM = windowsFont("Times New Roman"))
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
#stopCluster(cl)
library(openxlsx)
library(skimr)
library(DataExplorer)
library(caret)
library(randomForest)
library(pROC)
library(dplyr)
library(ROSE)
############################### function to change label to Y/N#####################################
change2Level <- function(y){y <- factor(y, levels=c(0, 1, "No", "Yes"))
y[y == '0'] <- 'No'
y[y == '1'] <- 'Yes'
y <- factor(y, levels=c("No", "Yes"))}
#########################read input data ###########################################
acnerank_num_train<-readRDS('data/acnerank_num_train.rds')
acnerank_num_test<-readRDS('data/acnerank_num_test.rds')
acnerank_num_test$Acne_rank<-NULL
acnerank_num_train$Acnerank<-change2Level(acnerank_num_train$Acnerank)
acnerank_num_test$Acnerank<-change2Level(acnerank_num_test$Acnerank)
acnerank_num_train_rose<-ROSE(Acnerank~., data =acnerank_num_train[,-1], seed = 1)$data
colnames(acnerank_num_train_rose)[60]
#################################build rf model##############################################
i.Acnerank <- 60
x_names<-colnames(acnerank_num_train_rose[,-i.Acnerank])
form_cls<-as.formula(paste0("Acnerank~",paste(x_names,collapse = "+")))
form_cls
###########################grid research#####################
hyper_grid <- expand.grid(
ntree =(2:10)*250)
nrow( hyper_grid)
dir.create("RF_optimize")
datapath= "E:/acne/01 Rcodesubmit/00 data"
setwd(datapath)
acnerank_num_train<-readRDS('acnerank_num_train.rds')
acnerank_num_test<-readRDS('acnerank_num_test.rds')
acnerank_num_test$Acne_rank<-NULL
acnerank_num_train$Acnerank<-change2Level(acnerank_num_train$Acnerank)
acnerank_num_test$Acnerank<-change2Level(acnerank_num_test$Acnerank)
getwd()
##################modelling performance compare#######################################
setwd("H:/acne_YHR/acne/Code/Rcodesubmit/RF_optimize")
rf1_acnerank<-readRDS("SevereAcne_tuneRF.1.rds")
testpredprop1_acnerank<-predict(rf1_acnerank,newdata = acnerank_num_test,type = 'prob')
rfPred1_acnerank<-predict(rf1_acnerank,acnerank_num_test,type="response")
rfperf1_acnerank<-confusionMatrix(acnerank_num_test$Acnerank,rfPred1_acnerank,positive='Yes', mode = 'everything')
rocrf1_acnerank<-roc(acnerank_num_test$Acnerank,testpredprop1_acnerank[,2],aur=TRUE,ci=TRUE)
overall_1 <- data.frame(rfperf1_acnerank$overall)
overall_1$names<-rownames(overall_1)
overall_1$performance<-overall_1 $rfperf1_acnerank.overall
overall_1 $rfperf1_acnerank.overall<-NULL
byClass_1<-data.frame(rfperf1_acnerank$byClass)
byClass_1$names<-rownames(byClass_1)
byClass_1$performance<-byClass_1$rfperf1_acnerank.byClass
byClass_1$rfperf1_acnerank.byClass<-NULL
aucci_1<-data.frame(rocrf1_acnerank$ci)
aucci_1$names<-c("aucciLower","auccimedian","aucciupper")
aucci_1$performance<-aucci_1$rocrf1_acnerank.ci
aucci_1$rocrf1_acnerank.ci<-NULL
auc_1<-data.frame(rocrf1_acnerank$auc)
auc_1$names<-c("auc")
auc_1$performance<-auc_1$rocrf1_acnerank.auc
auc_1$rocrf1_acnerank.auc<-NULL
perRF1<-rbind.data.frame(overall_1,byClass_1,auc_1,aucci_1)
perRF1$performance<-round(perRF1$performance,5)
rf_acnerank<-readRDS(paste("SevereAcne_tuneRF.",i,".rds",sep = ""))
i=1
rf_acnerank<-readRDS(paste("SevereAcne_tuneRF.",i,".rds",sep = ""))
testpredprop_acnerank<-predict(rf_acnerank,newdata = acnerank_num_test,type = 'prob')
rfPred_acnerank<-predict(rf_acnerank,acnerank_num_test,type="response")
rfperf_acnerank<-confusionMatrix(acnerank_num_test$Acnerank,rfPred_acnerank,positive='Yes', mode = 'everything')
rocrf_acnerank<-roc(acnerank_num_test$Acnerank,testpredprop_acnerank[,2],aur=TRUE,ci=TRUE)
overall <- data.frame(rfperf_acnerank$overall)
overall <- data.frame(rfperf_acnerank$overall)
overall$names<-rownames(overall)
overall$performance<-overall$rfperf.overall
overall
overall <- data.frame(rfperf_acnerank$overall)
overall$names<-rownames(overall)
overall$performance<-overall$rfperf_acnerank.overall
overall$rfperf_acnerank.overall<-NULL
overall
byClass <-data.frame(rfperf_acnerank$byClass)
byClass
byClass$names<-rownames(byClass)
byClass$performance<-byClass$rfperf_acnerank.byClass
byClass$rfperf_acnerank.byClass<-NULL
byClass
aucci<-data.frame(rocrf_acnerank$ci)
aucci$names<-c("aucciLower","auccimedian","aucciupper")
aucci$performance<-aucci$rocrf_acnerank.ci
aucci$rocrf1_acnerank.ci<-NULL
aucci
auc<-data.frame(rocrf_acnerank$auc)
auc$names<-c("auc")
auc$performance<-auc$rocrf_acnerank.auc
auc$rocrf_acnerank.auc<-NULL
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
overall
byClass
auc
aucci
auc<-data.frame(rocrf_acnerank$auc)
auc$names<-c("auc")
auc$performance<-auc$rocrf_acnerank.auc
auc$rocrf_acnerank.auc<-NULL
auc
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
auc
aucci
aucci$rocrf_acnerank.ci<-NULL
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
perRF$performance<-round(perRF1$performance,5)
##################modelling performance compare#######################################
setwd("H:/acne_YHR/acne/Code/Rcodesubmit/RF_optimize")
perRFlist <- list()
for (i in c(1:9)) {
rf_acnerank<-readRDS(paste("SevereAcne_tuneRF.",i,".rds",sep = ""))
testpredprop_acnerank<-predict(rf_acnerank,newdata = acnerank_num_test,type = 'prob')
rfPred_acnerank<-predict(rf_acnerank,acnerank_num_test,type="response")
rfperf_acnerank<-confusionMatrix(acnerank_num_test$Acnerank,rfPred_acnerank,positive='Yes', mode = 'everything')
rocrf_acnerank<-roc(acnerank_num_test$Acnerank,testpredprop_acnerank[,2],aur=TRUE,ci=TRUE)
overall <- data.frame(rfperf_acnerank$overall)
overall_1$names<-rownames(overall_1)
overall_1$performance<-overall_1 $rfperf1_acnerank.overall
overall_1 $rfperf1_acnerank.overall<-NULL
overall <- data.frame(rfperf_acnerank$overall)
overall$names<-rownames(overall)
overall$performance<-overall$rfperf_acnerank.overall
overall$rfperf_acnerank.overall<-NULL
byClass <-data.frame(rfperf_acnerank$byClass)
byClass$names<-rownames(byClass)
byClass$performance<-byClass$rfperf_acnerank.byClass
byClass$rfperf_acnerank.byClass<-NULL
aucci<-data.frame(rocrf_acnerank$ci)
aucci$names<-c("aucciLower","auccimedian","aucciupper")
aucci$performance<-aucci$rocrf_acnerank.ci
aucci$rocrf_acnerank.ci<-NULL
auc<-data.frame(rocrf_acnerank$auc)
auc$names<-c("auc")
auc$performance<-auc$rocrf_acnerank.auc
auc$rocrf_acnerank.auc<-NULL
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
perRF$performance<-round(perRF1$performance,5)
}
per_acnerank<-do.call(cbind,perRFlist)
per_acnerank<-per_acnerank[,c(1,2,4,6,8,10,12,14,16,18)]
per_acnerank<-data.frame(t(per_acnerank))
per_acnerank<-per_acnerank[2:10,]
per_acnerank$AUC<- per_acnerank$X1
per_acnerank$AUCLower<- per_acnerank$X11
per_acnerank$AUCUpper<- per_acnerank$X3
per_acnerank<-do.call(cbind,perRFlist)
perRFlist <- list()
for (i in c(1:9)) {
rf_acnerank<-readRDS(paste("SevereAcne_tuneRF.",i,".rds",sep = ""))
testpredprop_acnerank<-predict(rf_acnerank,newdata = acnerank_num_test,type = 'prob')
rfPred_acnerank<-predict(rf_acnerank,acnerank_num_test,type="response")
rfperf_acnerank<-confusionMatrix(acnerank_num_test$Acnerank,rfPred_acnerank,positive='Yes', mode = 'everything')
rocrf_acnerank<-roc(acnerank_num_test$Acnerank,testpredprop_acnerank[,2],aur=TRUE,ci=TRUE)
overall <- data.frame(rfperf_acnerank$overall)
overall_1$names<-rownames(overall_1)
overall_1$performance<-overall_1 $rfperf1_acnerank.overall
overall_1 $rfperf1_acnerank.overall<-NULL
overall <- data.frame(rfperf_acnerank$overall)
overall$names<-rownames(overall)
overall$performance<-overall$rfperf_acnerank.overall
overall$rfperf_acnerank.overall<-NULL
byClass <-data.frame(rfperf_acnerank$byClass)
byClass$names<-rownames(byClass)
byClass$performance<-byClass$rfperf_acnerank.byClass
byClass$rfperf_acnerank.byClass<-NULL
aucci<-data.frame(rocrf_acnerank$ci)
aucci$names<-c("aucciLower","auccimedian","aucciupper")
aucci$performance<-aucci$rocrf_acnerank.ci
aucci$rocrf_acnerank.ci<-NULL
auc<-data.frame(rocrf_acnerank$auc)
auc$names<-c("auc")
auc$performance<-auc$rocrf_acnerank.auc
auc$rocrf_acnerank.auc<-NULL
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
perRF$performance<-round(perRF1$performance,5)
perRFlist[[i]] <- perRF
}
per_acnerank<-do.call(cbind,perRFlist)
per_acnerank<-per_acnerank[,c(1,2,4,6,8,10,12,14,16,18)]
per_acnerank<-data.frame(t(per_acnerank))
per_acnerank<-per_acnerank[2:10,]
per_acnerank$AUC<- per_acnerank$X1
per_acnerank$AUCLower<- per_acnerank$X11
per_acnerank$AUCUpper<- per_acnerank$X3
per_acnerank$X1<-NULL
per_acnerank$X11<-NULL
per_acnerank$X2<-NULL
per_acnerank$X3<-NULL
per_acnerank1<-as.data.frame(lapply(per_acnerank,as.numeric))
per_acnerank1$Model<-c("RF1","RF2","RF3","RF4","RF5","RF6","RF7","RF8","RF9")
optimalRF_acnerank<-per_acnerank1$Model[which(per_acnerank1$F1==max(per_acnerank1$F1))] # selecting the optimal RF using largest AUC
optimalRF_acnerank
per_acnerank1$Model<-c("RF1","RF2","RF3","RF4","RF5","RF6","RF7","RF8","RF9")
optimalRF_acnerank<-per_acnerank1$Model[which(per_acnerank1$F1==max(per_acnerank1$F1))] # selecting the optimal RF using largest AUC
optimalRF_acnerank
per_acnerank1
per_acnerank1$F1
perRFlist <- list()
for (i in c(1:9)) {
print(i)
rf_acnerank<-readRDS(paste("SevereAcne_tuneRF.",i,".rds",sep = ""))
testpredprop_acnerank<-predict(rf_acnerank,newdata = acnerank_num_test,type = 'prob')
rfPred_acnerank<-predict(rf_acnerank,acnerank_num_test,type="response")
rfperf_acnerank<-confusionMatrix(acnerank_num_test$Acnerank,rfPred_acnerank,positive='Yes', mode = 'everything')
rocrf_acnerank<-roc(acnerank_num_test$Acnerank,testpredprop_acnerank[,2],aur=TRUE,ci=TRUE)
overall <- data.frame(rfperf_acnerank$overall)
overall_1$names<-rownames(overall_1)
overall_1$performance<-overall_1 $rfperf1_acnerank.overall
overall_1 $rfperf1_acnerank.overall<-NULL
overall <- data.frame(rfperf_acnerank$overall)
overall$names<-rownames(overall)
overall$performance<-overall$rfperf_acnerank.overall
overall$rfperf_acnerank.overall<-NULL
byClass <-data.frame(rfperf_acnerank$byClass)
byClass$names<-rownames(byClass)
byClass$performance<-byClass$rfperf_acnerank.byClass
byClass$rfperf_acnerank.byClass<-NULL
aucci<-data.frame(rocrf_acnerank$ci)
aucci$names<-c("aucciLower","auccimedian","aucciupper")
aucci$performance<-aucci$rocrf_acnerank.ci
aucci$rocrf_acnerank.ci<-NULL
auc<-data.frame(rocrf_acnerank$auc)
auc$names<-c("auc")
auc$performance<-auc$rocrf_acnerank.auc
auc$rocrf_acnerank.auc<-NULL
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
perRF$performance<-round(perRF1$performance,5)
perRFlist[[i]] <- perRF
}
for (i in c(1:9)) {
print(i)
rf_acnerank<-readRDS(paste("SevereAcne_tuneRF.",i,".rds",sep = ""))
testpredprop_acnerank<-predict(rf_acnerank,newdata = acnerank_num_test,type = 'prob')
rfPred_acnerank<-predict(rf_acnerank,acnerank_num_test,type="response")
rfperf_acnerank<-confusionMatrix(acnerank_num_test$Acnerank,rfPred_acnerank,positive='Yes', mode = 'everything')
rocrf_acnerank<-roc(acnerank_num_test$Acnerank,testpredprop_acnerank[,2],aur=TRUE,ci=TRUE)
overall <- data.frame(rfperf_acnerank$overall)
overall_1$names<-rownames(overall_1)
overall_1$performance<-overall_1 $rfperf1_acnerank.overall
overall_1 $rfperf1_acnerank.overall<-NULL
overall <- data.frame(rfperf_acnerank$overall)
overall$names<-rownames(overall)
overall$performance<-overall$rfperf_acnerank.overall
overall$rfperf_acnerank.overall<-NULL
byClass <-data.frame(rfperf_acnerank$byClass)
byClass$names<-rownames(byClass)
byClass$performance<-byClass$rfperf_acnerank.byClass
byClass$rfperf_acnerank.byClass<-NULL
aucci<-data.frame(rocrf_acnerank$ci)
aucci$names<-c("aucciLower","auccimedian","aucciupper")
aucci$performance<-aucci$rocrf_acnerank.ci
aucci$rocrf_acnerank.ci<-NULL
auc<-data.frame(rocrf_acnerank$auc)
auc$names<-c("auc")
auc$performance<-auc$rocrf_acnerank.auc
auc$rocrf_acnerank.auc<-NULL
perRF<-rbind.data.frame(overall,byClass,auc,aucci)
perRF$performance<-round(perRF$performance,5)
perRFlist[[i]] <- perRF
}
per_acnerank<-do.call(cbind,perRFlist)
per_acnerank<-per_acnerank[,c(1,2,4,6,8,10,12,14,16,18)]
per_acnerank<-data.frame(t(per_acnerank))
per_acnerank<-per_acnerank[2:10,]
per_acnerank$AUC<- per_acnerank$X1
per_acnerank$AUCLower<- per_acnerank$X11
per_acnerank$AUCUpper<- per_acnerank$X3
per_acnerank$X1<-NULL
per_acnerank$X11<-NULL
per_acnerank$X2<-NULL
per_acnerank$X3<-NULL
per_acnerank1<-as.data.frame(lapply(per_acnerank,as.numeric))
per_acnerank1$Model<-c("RF1","RF2","RF3","RF4","RF5","RF6","RF7","RF8","RF9")
optimalRF_acnerank<-per_acnerank1$Model[which(per_acnerank1$F1==max(per_acnerank1$F1))] # selecting the optimal RF using largest AUC
optimalRF_acnerank
################################# feature importance unsing the optimal RF  ##############################################
besti <- 3
besti <- 3
rfbest_acnerank<-rf3_acnerank
besti <- 3
rfbest_acnerank<-readRDS(paste("RF_optimize/SevereAcne_tuneRF.",besti,".rds",sep = ""))
besti <- 3
rfbest_acnerank<-readRDS(paste("SevereAcne_tuneRF.",besti,".rds",sep = ""))
acnerankrf_importance_scale<-data.frame(importance(rfbest_acnerank,scale = TRUE), check.names = FALSE)
acnerankrf_importance<-data.frame(importance(rfbest_acnerank), check.names = FALSE)
acnerankrf_importance_sort<- data.frame(acnerankrf_importance[order(acnerankrf_importance$MeanDecreaseAccuracy,decreasing = TRUE),])
acnerankrf_importance_sort$features=rownames(acnerankrf_importance_sort)
acnerankrf_importance_sort$relativeinf<-round(acnerankrf_importance_sort$MeanDecreaseAccuracy/sum(acnerankrf_importance_sort$MeanDecreaseAccuracy)*100,2)
acnerankrf_importance_sort$group<-ifelse(acnerankrf_importance_sort$features%in%c("Gender","Age","Ethnicity","Household_income","Grade"),"DSCs",
ifelse(acnerankrf_importance_sort$features%in%c("Skin_type","Sensitive_skin","Genetic","Menstrual_blood_volume",
"Menstrual_colic","Menstrual_cycle","","PHQ9","BMI"),"BMAs",
ifelse(acnerankrf_importance_sort$features%in%c("Den_barbecue_shop","Den_busstop","Den_cafeterias_shop","Den_fruit_shop",
"Den_hotpot_restaurant","Den_intersection","Den_KFC_McDonald.s",
"Den_milktea_shop","Den_roadlength","Denpop","NDVI"),"BEs",
ifelse(acnerankrf_importance_sort$features%in%c("Daylight","Temperature","Relative_humidity",
"CO","NO2","O3","PM2.5","SO2"),"NEs","LFs"))))
acnerankrf_importance_sort
